"""Trade helpers for interacting with the Kalshi REST API."""

from __future__ import annotations

import time
import uuid
from typing import Dict, Optional

import requests

try:
    from backend.kalshi_api import BASE_URL, KEYID, PRIVATE_KEY, create_signature, create_order, kalshi_url  # type: ignore
except ModuleNotFoundError:
    from api.kalshi import BASE_URL, KEYID, PRIVATE_KEY, create_signature, create_order, kalshi_url  # type: ignore


def kalshi_post(path: str, data: Dict[str, object]) -> Dict[str, object]:
    """Perform a signed POST request to the Kalshi API."""

    timestamp = str(int(time.time() * 1000))
    signature = create_signature(PRIVATE_KEY, timestamp, "POST", path)
    headers = {
        "KALSHI-ACCESS-KEY": KEYID,
        "KALSHI-ACCESS-SIGNATURE": signature,
        "KALSHI-ACCESS-TIMESTAMP": timestamp,
        "Content-Type": "application/json",
    }
    url = kalshi_url(path)
    response = requests.post(url, headers=headers, json=data)
    response.raise_for_status()
    return response.json()


def place_order(
    market_ticker: str,
    side: str,
    count: int,
    price: int,
    order_type: str = "limit",
    action: str = "buy",
    client_order_id: str | None = None,
) -> Dict[str, object]:
    """Place a buy order on Kalshi using the correct API fields."""

    side_lower = side.lower()
    if side_lower not in {"yes", "no"}:
        raise ValueError("side must be 'yes' or 'no'")

    action_lower = action.lower()
    if action_lower not in {"buy", "sell"}:
        raise ValueError("action must be 'buy' or 'sell'")

    # basic sanity checks
    try:
        count = int(count)
    except Exception:
        raise ValueError("count must be an int")
    if not (1 <= int(price) <= 99):
        raise ValueError("price must be integer cents between 1 and 99")

    order_data: Dict[str, object] = {
        "ticker": market_ticker,
    "side": side_lower,
    "action": action_lower,
    "count": count,
    "type": order_type,
    "client_order_id": client_order_id or str(uuid.uuid4()),
    }

    if side_lower == "yes":
        order_data["yes_price"] = price
    else:
        order_data["no_price"] = price

    return create_order(order_data)


def amend_order(
    order_id: str,
    *,
    side: Optional[str] = None,
    price_cents: Optional[int] = None,
    count: Optional[int] = None,
    updated_client_order_id: Optional[str] = None,
) -> Dict[str, object]:
    """Amend an existing order using Kalshi's amend endpoint.

    Fields:
    - When changing price, `side` must be provided and be 'yes' or 'no'.
    - `price_cents` is an integer 1..99 and applied to the matching side field.
    - `count` is the desired total (remaining + filled).
    - `updated_client_order_id` if not provided will be autogenerated.
    """

    path = f"/trade-api/v2/portfolio/orders/{order_id}/amend"

    payload: Dict[str, object] = {}
    if count is not None:
        payload["count"] = int(count)

    if price_cents is not None:
        if not side:
            raise ValueError("amend_order: 'side' ('yes' or 'no') is required when changing price")
        s = side.strip().lower()
        if s not in ("yes", "no"):
            raise ValueError("amend_order: side must be 'yes' or 'no'")
        payload[f"{s}_price"] = int(price_cents)

    payload["updated_client_order_id"] = str(updated_client_order_id or uuid.uuid4())
    return kalshi_post(path, payload)
